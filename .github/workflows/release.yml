# .github/workflows/release.yml
name: Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

jobs:
  build_and_publish:
    name: Build and Publish ${{ matrix.id }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - id: linux-x64-gnu
            target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            platform: linux/amd64
          - id: linux-x64-musl
            target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            platform: linux/amd64
          - id: linux-aarch64-gnu
            target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            platform: linux/arm64/v8
          - id: linux-aarch64-musl
            target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            platform: linux/arm64/v8
          - id: linux-arm-gnueabihf
            target: arm-unknown-linux-gnueabihf
            os: ubuntu-latest
            platform: linux/arm/v7
          - id: macos-arm64
            target: aarch64-apple-darwin
            os: macos-14
          - id: macos-x64
            target: x86_64-apple-darwin
            os: macos-13
          - id: windows-x64
            target: x86_64-pc-windows-msvc
            os: windows-latest
          - id: freebsd-x64
            target: x86_64-unknown-freebsd
            os: ubuntu-latest
            platform: linux/amd64
          - id: linux-powerpc64le-gnu
            target: powerpc64le-unknown-linux-gnu
            os: ubuntu-latest
            platform: linux/ppc64le
          - id: linux-s390x-gnu
            target: s390x-unknown-linux-gnu
            os: ubuntu-latest
            platform: linux/s390x
          - id: linux-riscv64-gnu
            target: riscv64gc-unknown-linux-gnu
            os: ubuntu-latest
            platform: linux/riscv64

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'pnpm'

      - name: Install Dependencies
        run: pnpm install

      - name: Build Binaries
        uses: ./.github/workflows/build.yml
        with:
          id: ${{ matrix.id }}
          target: ${{ matrix.target }}
          os: ${{ matrix.os }}
          platform: ${{ matrix.platform }}
          release: false

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: pg-tools-v${{ github.ref_name }}-${{ matrix.id }}
          path: artifacts

      - name: Create npm Packages
        run: pnpm run create-packages

      - name: Prepare and Publish Package
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          ARTIFACT_DIR_NAME=$(ls artifacts)
          ARTIFACT_DIR="artifacts/$ARTIFACT_DIR_NAME"

          cp -r $ARTIFACT_DIR/bin/* npm/${{ matrix.id }}/

          cd npm/${{ matrix.id }}
          pnpm publish --no-git-checks

  publish-main:
    name: Publish Main Package
    needs: [build_and_publish]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'pnpm'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Install Dependencies
        run: pnpm install

      - name: Build Main Package
        run: pnpm run build

      - name: Update Package Versions for Publishing
        id: set_version
        run: |
          node -e "
            const fs = require('fs');
            const pkg = require('./package.json');
            const finalVersion = \`\${pkg.version}-pg-\${pkg.pgVersion}\`;
            pkg.version = finalVersion;
            
            for (const key in pkg.optionalDependencies) {
              if (pkg.optionalDependencies[key] === 'workspace:*') {
                pkg.optionalDependencies[key] = finalVersion;
              }
            }
            
            fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2));
            console.log(`::set-output name=version::\${finalVersion}`);
          "

      - name: Publish Main Package to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: pnpm publish --no-git-checks
