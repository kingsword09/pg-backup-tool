# .github/workflows/ci.yml
name: Continuous Integration

# This workflow runs TypeScript checks on every push/PR and optionally runs platform builds
# For testing additional platforms, use the "Manual Platform Test" workflow.

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:
    inputs:
      run_platform_builds:
        description: 'Run platform builds (PostgreSQL binaries)'
        required: false
        default: false
        type: boolean
      run_extended_tests:
        description: 'Run extended platform tests (includes more architectures)'
        required: false
        default: false
        type: boolean

permissions:
  contents: read

jobs:
  # TypeScript and code quality checks (always run)
  typescript-checks:
    name: TypeScript & Code Quality
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: TypeScript Type Check & Build
        run: pnpm run build

      - name: Run Linter
        run: pnpm run lint

      - name: Run Formatter Check
        run: pnpm exec prettier --check .

  # Platform builds (only when manually requested)
  standard-builds:
    name: Standard Build ${{ matrix.id }}
    if: github.event.inputs.run_platform_builds == 'true'
    permissions:
      contents: read
    uses: ./.github/workflows/build.yml
    strategy:
      fail-fast: false
      matrix:
        include:
          # Core platforms tested when platform builds are requested
          - id: linux-x64-gnu
            target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            platform: linux/amd64
          - id: linux-x64-musl
            target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            platform: linux/amd64
          - id: macos-arm64
            target: aarch64-apple-darwin
            os: macos-14
          - id: windows-x64
            target: x86_64-pc-windows-msvc
            os: windows-latest
    with:
      id: ${{ matrix.id }}
      target: ${{ matrix.target }}
      os: ${{ matrix.os }}
      platform: ${{ matrix.platform }}
      release: false

  # Extended platform builds (only when both flags are enabled)
  extended-builds:
    name: Extended Build ${{ matrix.id }}
    if: github.event.inputs.run_platform_builds == 'true' && github.event.inputs.run_extended_tests == 'true'
    permissions:
      contents: read
    uses: ./.github/workflows/build.yml
    strategy:
      fail-fast: false
      matrix:
        include:
          - id: linux-aarch64-gnu
            target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            platform: linux/arm64/v8
          - id: linux-arm-gnueabihf
            target: arm-unknown-linux-gnueabihf
            os: ubuntu-latest
            platform: linux/arm/v7
          - id: freebsd-x64
            target: x86_64-unknown-freebsd
            os: ubuntu-latest
            platform: linux/amd64
    with:
      id: ${{ matrix.id }}
      target: ${{ matrix.target }}
      os: ${{ matrix.os }}
      platform: ${{ matrix.platform }}
      release: false

  # Summary job to provide clear feedback
  ci-summary:
    name: CI Summary
    needs: [typescript-checks, standard-builds, extended-builds]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: always()
    steps:
      - name: Generate CI Summary
        env:
          RUN_PLATFORM_BUILDS: ${{ github.event.inputs.run_platform_builds }}
          RUN_EXTENDED_TESTS: ${{ github.event.inputs.run_extended_tests }}
          TYPESCRIPT_RESULT: ${{ needs.typescript-checks.result }}
          STANDARD_BUILDS_RESULT: ${{ needs.standard-builds.result }}
          EXTENDED_BUILDS_RESULT: ${{ needs.extended-builds.result }}
        run: |
          echo "## CI Build Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # TypeScript checks (always run)
          echo "### TypeScript & Code Quality" >> $GITHUB_STEP_SUMMARY
          if [[ "$TYPESCRIPT_RESULT" == "success" ]]; then
            echo "✅ **TypeScript checks:** Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **TypeScript checks:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY

          # Platform builds (conditional)
          if [[ "$RUN_PLATFORM_BUILDS" == "true" ]]; then
            echo "### Platform Builds" >> $GITHUB_STEP_SUMMARY
            echo "**Mode:** Platform builds enabled" >> $GITHUB_STEP_SUMMARY

            if [[ "$STANDARD_BUILDS_RESULT" == "success" ]]; then
              echo "✅ **Standard Builds:** Passed" >> $GITHUB_STEP_SUMMARY
            elif [[ "$STANDARD_BUILDS_RESULT" == "failure" ]]; then
              echo "❌ **Standard Builds:** Failed" >> $GITHUB_STEP_SUMMARY
            else
              echo "⏭️ **Standard Builds:** Skipped" >> $GITHUB_STEP_SUMMARY
            fi

            if [[ "$RUN_EXTENDED_TESTS" == "true" ]]; then
              if [[ "$EXTENDED_BUILDS_RESULT" == "success" ]]; then
                echo "✅ **Extended Builds:** Passed" >> $GITHUB_STEP_SUMMARY
              elif [[ "$EXTENDED_BUILDS_RESULT" == "failure" ]]; then
                echo "❌ **Extended Builds:** Failed" >> $GITHUB_STEP_SUMMARY
              else
                echo "⏭️ **Extended Builds:** Skipped" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          else
            echo "### Platform Builds" >> $GITHUB_STEP_SUMMARY
            echo "⏭️ **Platform builds:** Skipped (not requested)" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Testing Options" >> $GITHUB_STEP_SUMMARY
          echo "- **Default CI:** Only runs TypeScript checks and code quality" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform Builds:** Manually enable 'Run platform builds' to test PostgreSQL binaries" >> $GITHUB_STEP_SUMMARY
          echo "- **Extended Builds:** Enable both flags to test additional architectures" >> $GITHUB_STEP_SUMMARY
          echo "- **Individual Platform Testing:** Use the 'Manual Platform Test' workflow" >> $GITHUB_STEP_SUMMARY
          echo "- **Full Release Testing:** All platforms are tested during release builds" >> $GITHUB_STEP_SUMMARY
