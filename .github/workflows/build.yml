# .github/workflows/build.yml
name: Reusable Build Workflow

# This is a reusable workflow that builds, tests, and packages the PG tools
# for a single platform. It is called by 'ci.yml' and 'release.yml'.

on:
  workflow_call:
    inputs:
      id:
        type: string
        required: true
      target:
        type: string
        required: true
      os:
        type: string
        required: true
      platform:
        type: string
      release:
        description: If this is a release build, set to true.
        type: boolean
        default: false

jobs:
  build:
    name: Build for ${{ inputs.id }}
    runs-on: ${{ inputs.os }}
    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v4

      - name: Setup Environment Variables
        run: |
          # Extract version from tag (e.g., v16.3.0 -> 16.3.0)
          # Use a default for non-tag refs.
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            version_tag="${{ github.ref_name }}"
            version="${version_tag#v}"
          else
            # Default to a full, valid version string for CI/manual runs.
            # This is important for the Windows build, which downloads a
            # pre-compiled binary using a specific version in the URL.
            version="17.5.0"
          fi

          root_directory="$(pwd)"
          archive="pg-tools-v$version-${{ inputs.id }}"
          install_directory="$root_directory/$archive"
          major_version=$(echo "$version" | awk -F. '{print $1"."$2}')

          echo "PG_VERSION=$version" | tee -a $GITHUB_ENV
          echo "PG_MAJOR_VERSION=$major_version" | tee -a $GITHUB_ENV
          echo "ARCHIVE_NAME=$archive" | tee -a $GITHUB_ENV
          echo "INSTALL_DIR=$install_directory" | tee -a $GITHUB_ENV
          echo "ROOT_DIR=$root_directory" | tee -a $GITHUB_ENV

      # =================================================================
      # Linux Build (using Docker)
      # =================================================================
      - name: Setup Docker Build (Linux)
        if: runner.os == 'Linux'
        run: |
          docker run --privileged --rm tonistiigi/binfmt --install all
          if [[ "${{ inputs.id }}" == *musl* ]]; then
            echo "DOCKERFILE=dockerfiles/Dockerfile.linux-musl" >> $GITHUB_ENV
          else
            echo "DOCKERFILE=dockerfiles/Dockerfile.linux-gnu" >> $GITHUB_ENV
          fi

      - name: Build with Docker (Linux)
        if: runner.os == 'Linux'
        run: |
          docker buildx build \
            --build-arg "POSTGRESQL_VERSION=${PG_VERSION}" \
            --build-arg "PG_MAJOR_VERSION=${PG_MAJOR_VERSION}" \
            --platform "${{ inputs.platform }}" \
            --tag pg-tools-build:latest \
            -f "${{ env.DOCKERFILE }}" .
          
          container_id=$(docker create --platform "${{ inputs.platform }}" pg-tools-build:latest)
          docker cp "${container_id}:/opt/postgresql" "${INSTALL_DIR}"
          docker rm -v "${container_id}"

      # =================================================================
      # macOS Build (from source)
      # =================================================================
      - name: Install Dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install openssl zlib

      - name: Download and Extract Source (macOS)
        if: runner.os == 'macOS'
        run: |
          wget "https://ftp.postgresql.org/pub/source/v${PG_MAJOR_VERSION}/postgresql-${PG_VERSION}.tar.gz"
          tar -xzf "postgresql-${PG_VERSION}.tar.gz"

      - name: Build from Source (macOS)
        if: runner.os == 'macOS'
        working-directory: postgresql-${{ env.PG_VERSION }}
        run: |
          ./configure \
            --prefix=${INSTALL_DIR} \
            --without-readline \
            --with-openssl \
            --with-zlib
          make -C src/interfaces/libpq all install
          make -C src/bin/pg_dump all install
          make -C src/bin/pg_restore all install

      # =================================================================
      # Windows Build (using pre-compiled binaries)
      # =================================================================
      - name: Download and Extract Binaries (Windows)
        if: runner.os == 'Windows'
        run: |
          # EnterpriseDB download URLs use the major version (e.g., 16.3), not the full patch version.
          # Use -L to follow redirects, -f to fail on server errors, and -s for silent mode.
          curl -Lfs -o postgresql.zip "https://get.enterprisedb.com/postgresql/postgresql-${PG_MAJOR_VERSION}-1-windows-x64-binaries.zip"
          unzip -q postgresql.zip
          mkdir -p "${INSTALL_DIR}"
          mv pgsql/bin "${INSTALL_DIR}/"
          mv pgsql/lib "${INSTALL_DIR}/"
          rm -rf pgsql

      # =================================================================
      # Packaging and Testing
      # =================================================================
      - name: Package Artifacts
        id: package
        run: |
          cp "README.md" "${INSTALL_DIR}/"
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            7z a "${ARCHIVE_NAME}.zip" "${ARCHIVE_NAME}"
            echo "ASSET_PATH=${ARCHIVE_NAME}.zip" >> $GITHUB_OUTPUT
          else
            tar -czf "${ARCHIVE_NAME}.tar.gz" -C "${ROOT_DIR}" "${ARCHIVE_NAME}"
            echo "ASSET_PATH=${ARCHIVE_NAME}.tar.gz" >> $GITHUB_OUTPUT
          fi

      - name: Test Binaries
        working-directory: ${{ env.INSTALL_DIR }}
        run: |
          cp "${ROOT_DIR}/scripts/test.sh" .
          chmod +x test.sh
          ./test.sh "${PG_VERSION}"

      # Upload the final archive as an artifact for both CI and Release runs.
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARCHIVE_NAME }}
          path: ${{ steps.package.outputs.ASSET_PATH }}

      # =================================================================
      # Release to GitHub (only if triggered by release workflow)
      # =================================================================
      - name: Upload to GitHub Release
        if: inputs.release == true
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ steps.package.outputs.ASSET_PATH }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
