# This Dockerfile builds pg_dump and pg_restore for Debian-based systems (glibc).
# It's used by the GitHub Actions workflow for Linux builds.
ARG POSTGRESQL_VERSION
ARG PG_MAJOR_VERSION

# Use a specific Debian version for reproducibility.
# This supports multiple architectures: amd64, arm64, arm/v7, ppc64le, s390x, riscv64
FROM debian:bullseye

ARG POSTGRESQL_VERSION
ARG PG_MAJOR_VERSION

# Prevent interactive prompts during package installation.
ENV DEBIAN_FRONTEND=noninteractive

# Install build dependencies.
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
      build-essential \
      wget \
      zlib1g-dev \
      libssl-dev \
      ca-certificates \
      bison \
      flex \
      perl \
      file \
      binutils \
    && rm -rf /var/lib/apt/lists/*

# Create a non-root user to perform the build.
RUN useradd -ms /bin/bash builder
USER builder
WORKDIR /home/builder

# Download and extract the PostgreSQL source code.
RUN wget "https://ftp.postgresql.org/pub/source/v${PG_MAJOR_VERSION}/postgresql-${POSTGRESQL_VERSION}.tar.gz" && \
    tar -xzf "postgresql-${POSTGRESQL_VERSION}.tar.gz"

WORKDIR /home/builder/postgresql-${POSTGRESQL_VERSION}

# Configure the build. We only need a few components, not the full server.
# The LDFLAGS sets the 'rpath', which bakes a relative library search path
# into the executables. '$$ORIGIN' is a special linker variable that means
# 'the directory where the executable is located'. This makes the binaries portable.
RUN LDFLAGS="-Wl,-rpath,'\$\$ORIGIN/../lib'" ./configure \
    --prefix=/opt/postgresql \
    --enable-integer-datetimes \
    --enable-option-checking=fatal \
    --without-readline \
    --with-openssl \
    --with-zlib \
    --without-icu \
    --without-ldap \
    --with-pgport=5432

# Build only the required components.
RUN make -C src/common all && \
    make -C src/include all && \
    make -C src/interfaces/libpq all && \
    make -C src/bin/pg_dump all

# Create the install directory with proper permissions first
USER root
RUN mkdir -p /opt/postgresql && chown -R builder:builder /opt/postgresql
USER builder

# Install to the staging directory.
RUN make -C src/interfaces/libpq install && \
    make -C src/bin/pg_dump install

# Copy required shared libraries using ldd to find dependencies
USER root
RUN mkdir -p /opt/postgresql/lib && \
    # Detect architecture for library paths
    ARCH=$(uname -m) && \
    echo "Building for architecture: $ARCH" && \
    for binary in /opt/postgresql/bin/pg_dump /opt/postgresql/bin/pg_restore; do \
      if [ -f "$binary" ]; then \
        echo "Processing dependencies for $binary" && \
        ldd "$binary" | grep -E "(libssl|libcrypto|libz)" | awk '{print $3}' | while read lib; do \
          if [ -f "$lib" ] && [ ! -f "/opt/postgresql/lib/$(basename "$lib")" ]; then \
            echo "Copying library: $lib" && \
            cp "$lib" /opt/postgresql/lib/ 2>/dev/null || true; \
          fi; \
        done; \
      fi; \
    done && \
    # List final libraries for debugging
    echo "Final libraries in /opt/postgresql/lib:" && \
    ls -la /opt/postgresql/lib/ || true && \
    # Show binary information
    echo "Binary information:" && \
    file /opt/postgresql/bin/pg_dump /opt/postgresql/bin/pg_restore 2>/dev/null || true && \
    # Show library dependencies
    echo "Library dependencies:" && \
    ldd /opt/postgresql/bin/pg_dump 2>/dev/null || true

USER builder
